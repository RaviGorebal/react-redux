{"version":3,"sources":["actions/movies.js","history.js","pages/Home.js","pages/ViewMovie.js","Router.js","App.js","reducers/newMovies.js","reducers/index.js","store.js","serviceWorker.js","index.js"],"names":["successNewMovies","movies","records","type","successMovies","failure","successViewMovie","movie","_movie","failureViewMovie","history","createBrowserHistory","Home","require","props","viewMovies","id","push","updatemovieList","query","pageNumber","getMovies","newMovieList","getNewMovies","state","oldData","options","root","rootMargin","this","observer","IntersectionObserver","handleObserver","bind","observe","lazy_loadingRef","entities","y","boundingClientRect","prevY","_page","totalRecords","fetchedRecords","setState","loadingTextCSS","display","loading","class","aria-describedby","ev","target","value","className","onClick","undefined","map","index","src","Poster","alt","Title","Year","imdbID","ref","style","height","margin","Component","connect","console","log","page","dispatch","a","axios","method","url","params","s","cancelToken","CancelToken","c","then","res","data","Search","totalResults","error","ViewMovies","i","match","Actors","Country","Director","Genre","Language","viewMovie","Routers","path","component","exact","ViewMovie","App","initialState","loader","newMovies","action","length","_data","concat","rootReducer","combineReducers","newMovieReducer","store","createStore","applyMiddleware","thunkMiddleware","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4804e41a.chunk.js","sourcesContent":["\n\nimport axios from 'axios'\n\n\nexport const viewMovie = (id)=>{\n  return async (dispatch)=>{\n    try {\n      let cancel;\n            const movieData = await axios({\n                method:'GET',\n                url:'http://www.omdbapi.com/?apikey=b9bd48a6',\n                params:{i:id},\n                cancelToken: new axios.CancelToken(c => cancel = c )\n            }).then(\n                res =>  dispatch(successViewMovie( res)),\n                error => dispatch(failureViewMovie(error))\n            );\n    } catch (error) {\n    //   dispatch(clearMovie ());\n    }\n  }\n}\nexport const getNewMovies =  (query,page) => {\n  return async (dispatch)=>{\n\n    try {\n      let cancel;\n            const movieData = await axios({\n                method:'GET',\n                url:'http://www.omdbapi.com/?apikey=b9bd48a6',\n                params:{s:query,page: page},\n                cancelToken: new axios.CancelToken(c => cancel = c )\n            }).then(\n                res =>  dispatch(successNewMovies( res.data.Search, res.data.totalResults)),\n                error => dispatch(failure(error))\n            );\n    } catch (error) {\n\n    }\n  }\n    }\n\nexport const getMovies =  (query,page) => {\n        return async (dispatch)=>{\n            try {\n                let cancel;\n                      const movieData= await  axios({\n                          method:'GET',\n                          url:'http://www.omdbapi.com/?apikey=b9bd48a6',\n                          params:{s:query,page: page},\n                          cancelToken: new axios.CancelToken(c => cancel = c )\n                      }).then(\n                        res =>  dispatch(successMovies( res.data.Search, res.data.totalResults)),\n                        error => dispatch(failure( error))\n                    );\n              } catch (error) {\n\n              }\n        }\n    }\n\n\n\n    \nconst successNewMovies = (movies, records) => ({\n    type: \"GET_NEW_MOVIE\",\n     movies:   movies,\n     records : records,\n  });\n\nconst failureNew = (movie, records) =>({\n    type : \"FAILURE_GET_NEW_MOVIE\",\n    movies:[],\n    records: 0\n})\n  const successMovies = (movies, records) => ({\n    type: \"GET_MOVIE\",\n    movies,\n    records,\n  });\n\n  const failure = (movies, records) => ({\n    type: \"FAIL_MOVIE\",\n    movies : [],\n    records: 0\n  });\n\n  const successViewMovie =(movie)=>({\n    type :\"SUCCESS_VIEW_MOVIE\",\n    _movie:movie\n  }\n)\n\nconst failureViewMovie =(movie)=>({\n  type :\"SUCCESS_VIEW_MOVIE\",\n  movie:null\n}\n)\n\n\n\n\n\n\n","import { createBrowserHistory } from \"history\"\nexport let history = createBrowserHistory()","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport {getMovies, getNewMovies } from \"../actions/movies\";\n\nimport {history} from '../history'\n\nconst _css = require('./index.css')\n\n class Home extends Component{\n  constructor(props) {\n        super(props);\n        this.state = {\n            query : 'man',\n            pageNumber :1,\n            oldData : this.props.movies\n        };\n    }\n\n    async componentDidMount() {\n        var options = {\n          root: null, // Page as root\n          rootMargin: \"20px\"\n        };\n        // Create an observer\n        this.observer = new IntersectionObserver(\n          this.handleObserver.bind(this), //callback\n          options\n        );\n        //Observe the `lazy_loadingRef`\n        this.observer.observe(this.lazy_loadingRef);\n      }\n\n    \n    handleObserver(entities, observer) {\n        const y = entities[0].boundingClientRect.y;\n            if (this.state.prevY > y) {\n                const _page = this.state.pageNumber + 1;\n                if(this.props.totalRecords>this.props.fetchedRecords){\n                    this.updatemovieList(this.state.query, _page)\n                    this.setState({pageNumber: _page})\n                }\n            }\n            this.setState({ prevY: y });\n    }\n\n\n    viewMovies=(id)=>{\n        history.push('/view/'+id);\n    }\n    updatemovieList = (query, pageNumber) => this.props.getMovies(query,pageNumber);\n    newMovieList= (query, pageNumber) =>  this.props.getNewMovies(query,1);\n\n      \nrender(){\n    const loadingCSS = {\n        height: \"100px\",\n        margin: \"30px\"\n      };\n      const loadingTextCSS = { display: this.state.loading ? \"block\" : \"none\" };\n      \n  \n    return (\n            <div>\n                <div>\n                <h1>MOVIE SERACH IMDB </h1>\n                    <div class=\"input-group mb-3\">\n                        <input type=\"text\" class=\"form-control\" \n                        aria-describedby=\"button-addon2\"\n                        type=\"text\"\n                            value={this.state.query}\n                            onChange={ev => this.setState({ query: ev.target.value })}\n                            placeholder=\"Enter Movie Name\" />\n                        <div class=\"input-group-append\">\n                        <button className=\"btn btn-outline-primary btn-ext\"\n                         type=\"button\" \n                            onClick={() => this.newMovieList(this.state.query,1)}> Search</button>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row col-sm-12\" >\n           <div class=\"col-sm-4\"></div>\n          <div class=\"col-sm-4\">\n          {\n          this.props.movies !== undefined && this.props.movies !==[] ? this.props.movies.map((movie, index) => (\n         <div>\n             { movie !== undefined?\n                    <div className=\"col-sm-12\">\n                    <br />\n                      <div class=\"card\" >\n                        \n                          <img class=\"card-img-top\" src={movie.Poster} alt={movie.Title} />\n                          <div>\n                            <p class=\"card-text\">{movie.Title}</p>\n                            <p class=\"card-text\">{movie.Year}</p>\n                            <button type=\"button\"  class=\"btn btn-primary btn-primary-custom\" \n                              onClick={()=>this.viewMovies(movie.imdbID)}\n                            >View Big</button>\n                          </div>                  \n                      </div>\n                  </div>:\"\"\n          } \n         </div>\n           )):\"\"\n           } \n          </div>\n\n        <div class=\"col-sm-3\"></div>\n        </div>\n\n\n        <div ref={lazy_loadingRef => (this.lazy_loadingRef = lazy_loadingRef)}\n          style={loadingCSS}\n        >\n          <span style={loadingTextCSS}>Loading...</span>\n        </div>\n\n                    </div>\n\n     );\n }\n}\nconst mapStateToProps = state => {\n    console.log(\"STATE VALUE\",state)\n  return {\n    movies: state.movies.movies,\n    fetchedRecords: state.movies.fetchedRecords,\n    totalRecords: state.movies.totalRecords\n  }\n}\n\nexport default connect(mapStateToProps,{\ngetMovies,\ngetNewMovies\n})(Home);","import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport {viewMovie } from \"../actions/movies\"\nimport axios from 'axios'\n\n\n class ViewMovies extends Component{\n  constructor(props) {\n        super(props);\n        this.state = {\n            id: null,\n            movie:null\n          };\n        }\n\nasync componentDidMount(){\n    let cancel;\n     await axios({\n            method:'GET',\n            url:'http://www.omdbapi.com/?apikey=b9bd48a6',\n            params:{i:this.props.match.params.id},\n            cancelToken: new axios.CancelToken(c => cancel = c )\n        }).then(\n            res =>  this.setState({movie:res.data},()=>{console.log(this.state.movie)}),\n            error => {console.log(error)}\n        );   \n}\n\n      render(){\n          return (\n            <div class=\"col-sm-12\">\n                <div class=\"col-sm-4\"></div>\n                <div>\n               {this.state.movie !==null ? \n                <div class=\"col-sm-4\">\n                        <br />\n                      <div class=\"card\" >\n                          <img class=\"card-img-top\" src={this.state.movie.Poster} alt={this.state.movie.Title} />\n                          <div>\n                          <br />\n                            <p class=\"card-text\">{this.state.movie.Title}</p>\n                            <p class=\"card-text\">{this.state.movie.Year}</p>\n                            <p class=\"card-text\">{this.state.movie.Actors}</p>\n                            <p class=\"card-text\">{this.state.movie.Country}</p>\n                            <p class=\"card-text\">{this.state.movie.Director}</p>\n                            <p class=\"card-text\">{this.state.movie.Genre}</p>\n                            <p class=\"card-text\">{this.state.movie.Language}</p>\n                          </div>  \n                          <br />                \n                      </div>\n                </div>:\"\"\n                }\n              </div>\n\n              <div class=\"col-sm-4\"></div>\n            </div>\n          )\n      }\n\n    }\n    const mapStateToProps = state => {\n      return {\n        movie: state.movies._movie\n      }\n    }\n    \n    export default connect(mapStateToProps,{\n    viewMovie\n    })(ViewMovies);","import React, { Suspense, lazy } from \"react\"\nimport { Router, Switch, Route } from \"react-router-dom\"\n// import App from './App'\nimport Home from './pages/Home';\nimport ViewMovie from './pages/ViewMovie';\n// import Consultation from './pages/Consultation'\n// import Header from './pages/Header'\nimport {history} from './history'\n\nexport default function Routers() {\n\nreturn (\n    <Router history={history}>\n       <main>\n            <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/view/:id\" component={ViewMovie}  /> \n            {/*<Route path=\"/catalogue\" component={Catalogue}  />\n            <Route path=\"/usercatalogue\" component={userCatalogue} />\n            <Route path=\"/consultation/:user_id\" component={Consultation} />\n             <Route path=\"/userlist\" component={UserList} /> */}\n           \n            </Switch>\n        </main>\n    </Router>\n\n)\n\n}","import React from 'react';\nimport Routers  from './Router'\n\nfunction App() {\n  return (\n    <Routers/>\n  );\n}\n\nexport default App;\n","const initialState ={\n    loader: true,\n    movies : [],\n    records : 0,\n}\n\n\nconst newMovies = (state = initialState, action) => {\n    // alert('HI')\n    console.log(\"MOVIES REDUCER, state\", action, )\n        switch (action.type) {\n          case \"GET_NEW_MOVIE\":\n          return {\n            loader : false,\n            movies:action.movies,\n            totalRecords:action.records,\n            fetchedRecords :  action.movies.length === undefined? 0: action.movies.length\n          } \n\n          case \"GET_MOVIE\":\n            const _data = state.movies.concat(action.movies);\n            // console.log(\"_data\",_data)\n            return {\n              loader : false,\n              movies:  _data,\n              totalRecords:action.records,\n              fetchedRecords :  _data.length === undefined? 0: _data.length\n            } \n          case 'FAIL_MOVIE':\n            return {\n            loader : false,\n            movies:  state.movies.concat(action.movies),\n            totalRecords: state.movies.concat(action.movies).length!== undefined? state.movies.concat(action.movies).length:0,\n            fetchedRecords :  state.movies.concat(action.movies).length!== undefined? state.movies.concat(action.movies).length:0,\n          }\n          case 'SUCCESS_VIEW_MOVIE':\n            return {\n            \n            _movie:  action._movie.data\n          }\n          default:\n          return state\n        }\n      }\n      \n      export default newMovies","import { combineReducers } from \"redux\"\nimport newMovieReducer from './newMovies'\n\nconst rootReducer = combineReducers({\n movies:newMovieReducer,\n})\n\nexport default rootReducer","// import { createStore, applyMiddleware, compose } from \"redux\"\n// // import createDebounce from \"redux-debounced\"\n// import thunk from \"redux-thunk\"\n// import rootReducer from \"./reducers/index\"\n\n// const middlewares = [thunk]\n\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n// const store = createStore(\n//   rootReducer,\n//   {},\n//   composeEnhancers(applyMiddleware(...middlewares))\n// )\n\n// export { store }\n\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n// import { createLogger } from 'redux-logger';\nimport rootReducer from './reducers/index';\n\n// const loggerMiddleware = createLogger();\n\nexport const store = createStore(\n    rootReducer,\n    applyMiddleware(\n        thunkMiddleware\n        // loggerMiddleware\n    )\n);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport {store} from \"./store\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}